name: MLOps Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: [self-hosted, linux, mlops]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pylint black isort
          # Install dependencies more efficiently on self-hosted runners
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          find ./services -name "requirements.txt" -exec pip install -r {} \;
          find ./shared -name "requirements.txt" -exec pip install -r {} \; || true
      
      - name: Run linting
        run: |
          black --check --diff .
          isort --check-only --profile black .
          pylint --disable=C0111,C0103,C0303,C0330,C0326 --ignore=tests/ .
      
      - name: Run tests
        run: pytest --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-images:
    name: Build Docker Images
    runs-on: [self-hosted, linux, docker]
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [ingestion-api, transcription-worker, llm-worker, job-status-api]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set version tag
        id: version
        run: echo "VERSION=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.service }}:latest,${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.service }}:${{ steps.version.outputs.VERSION }}
          build-args: |
            BUILD_TARGET=production
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/${{ matrix.service }}:buildcache,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: [self-hosted, linux, mlops]
    needs: build-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.ENABLE_GCP_DEPLOYMENT == 'true'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}
      
      - name: Deploy to GKE
        run: |
          cd infrastructure/k8s
          kubectl apply -k overlays/dev
          kubectl rollout restart deployment -n mlops-assessment

  deploy-prod:
    name: Deploy to Production
    runs-on: [self-hosted, linux, mlops]
    needs: deploy-dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.transcription-pipeline.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_PROD_CLUSTER_NAME }}
          location: ${{ secrets.GKE_PROD_ZONE }}
      
      - name: Deploy to GKE Production
        run: |
          cd infrastructure/k8s
          kubectl apply -k overlays/prod
          kubectl rollout restart deployment -n mlops-assessment-prod
